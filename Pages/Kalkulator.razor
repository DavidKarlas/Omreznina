@using Blazored.Toast
@using Blazored.Toast.Services
@using LiveChartsCore.Drawing
@using LiveChartsCore.SkiaSharpView.Blazor
@using Omreznina.Client.Logic
@using Omreznina.Components
@using Omreznina.Logic
@using Omreznina.Client.Pages
@using Omreznina.Pages.SettingsPages
@using Omreznina.Shared
@using System.Diagnostics
@inject IToastService toastService
@inject ViewModel ViewModel

<div class="container-fluid" style="height:150px;">
    <CartesianChart Series="ViewModel.AllCategoriesViewModel.Series"
                    Title="ViewModel.AllCategoriesViewModel.Title"
                    LegendTextSize="12"
                    Tooltip="null"
                    XAxes="ViewModel.AllCategoriesViewModel.XAxis"
                    YAxes="ViewModel.AllCategoriesViewModel.YAxis"
                    LegendPosition=@LiveChartsCore.Measure.LegendPosition.Bottom />
</div>
<div class="container-fluid" style="height:400px;">
    <CartesianChart @ref=monthsChart
                    Tooltip="MonthsTooltip"
                    LegendTextSize="13"
                    Title="ViewModel.MonthsViewModel.Title"
                    Series="ViewModel.MonthsViewModel.Series"
                    XAxes="ViewModel.MonthsViewModel.XAxis"
                    YAxes="ViewModel.MonthsViewModel.YAxis"
                    OnPointerDownCallback="OnMonthlyPointerDown"
                    LegendPosition=@LiveChartsCore.Measure.LegendPosition.Bottom />
</div>
<div style="height:300px" hidden="@(!ViewModel.DaysViewModel.IsVisible)">
    <CartesianChart Series="ViewModel.DaysViewModel.Series"
                    @ref=dailyChart
                    Title="ViewModel.DaysViewModel.Title"
                    OnPointerDownCallback="OnDailyPointerDown"
                    AnimationsSpeed="TimeSpan.FromTicks(0)"
                    XAxes="ViewModel.DaysViewModel.XAxis"
                    YAxes="ViewModel.DaysViewModel.YAxis">
    </CartesianChart>
</div>

<div style="height:300px" hidden="@(!ViewModel.FifteenMinutesViewModel.IsVisible)">
    <CartesianChart Series="ViewModel.FifteenMinutesViewModel.Series"
                    Title="ViewModel.FifteenMinutesViewModel.Title"
                    XAxes="ViewModel.FifteenMinutesViewModel.XAxis"
                    VisualElements="ViewModel.FifteenMinutesViewModel.VisualElements"
                    YAxes="ViewModel.FifteenMinutesViewModel.YAxis">
    </CartesianChart>
</div>
@code {
    private MonthsTooltip MonthsTooltip { get; set; } = new();
    CartesianChart monthsChart;
    CartesianChart dailyChart;

    private void AgreedMaxBlocksMessage(string message)
    {
        if (ViewModel.CurrentPage.Component==typeof(Kalkulator) ||
            ViewModel.CurrentPage.Component==typeof(BlocksPowerPage))
            return;
        toastService.ClearAll();
        toastService.ShowWarning(message);
    }

    public void OnMonthlyPointerDown(PointerEventArgs e)
    {
        var p = new LvcPoint(e.OffsetX, e.OffsetY);
        var point = monthsChart.GetPointsAt(p).FirstOrDefault();
        if (point != null)
            ViewModel.MonthsViewModel.SelectMonth = point.Index;
        ViewModel.UpdateGraphs(true);
    }

    public void OnDailyPointerDown(PointerEventArgs e)
    {
        var p = new LvcPoint(e.OffsetX, e.OffsetY);
        var point = dailyChart.GetPointsAt(p).FirstOrDefault();
        if (point != null)
            ViewModel.DaysViewModel.SelectDay(point.Context.DataSource as DayReport);
        ViewModel.UpdateGraphs(true);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ViewModel.CalculationOptions.AgreedMaxPowerBlocks.ErrorMessage += AgreedMaxBlocksMessage;

        ViewModel.PropertyChanged += (s,e)=>{
            StateHasChanged();
        };
    }
}
